import cv2
import mediapipe as mp
import pyautogui

# Initialize Mediapipe hands and drawing utilities
mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils
hands = mp_hands.Hands(max_num_hands=1, min_detection_confidence=0.7, min_tracking_confidence=0.7)

# Gesture thresholds
THUMB_THRESHOLD = 0.2
INDEX_THRESHOLD = 0.2

# Gesture mapping functions
def detect_gesture(hand_landmarks):
    thumb_tip = hand_landmarks.landmark[mp_hands.HandLandmark.THUMB_TIP]
    thumb_mcp = hand_landmarks.landmark[mp_hands.HandLandmark.THUMB_MCP]
    index_tip = hand_landmarks.landmark[mp_hands.HandLandmark.INDEX_FINGER_TIP]
    index_mcp = hand_landmarks.landmark[mp_hands.HandLandmark.INDEX_FINGER_MCP]
    middle_tip = hand_landmarks.landmark[mp_hands.HandLandmark.MIDDLE_FINGER_TIP]

    # Gesture: Thumb up (Next Track)
    if thumb_tip.y < thumb_mcp.y and index_tip.y > index_mcp.y:
        return "NEXT_TRACK"

    # Gesture: Thumb down (Previous Track)
    if thumb_tip.y > thumb_mcp.y and index_tip.y > index_mcp.y:
        return "PREVIOUS_TRACK"

    # Gesture: Fist (Play/Pause)
    if thumb_tip.y > thumb_mcp.y and index_tip.y > index_mcp.y and middle_tip.y > index_mcp.y:
        return "PLAY_PAUSE"

    # Gesture: Open palm (Volume Up)
    if thumb_tip.y < thumb_mcp.y and index_tip.y < index_mcp.y and middle_tip.y < index_mcp.y:
        return "VOLUME_UP"

    # Gesture: Closed palm (Volume Down)
    if thumb_tip.y > thumb_mcp.y and index_tip.y > index_mcp.y and middle_tip.y > index_mcp.y:
        return "VOLUME_DOWN"

    return None

# Map gestures to actions
def map_gesture_to_action(gesture):
    if gesture == "NEXT_TRACK":
        print("Next Track")
        pyautogui.press('right')  # Simulate right arrow key
    elif gesture == "PREVIOUS_TRACK":
        print("Previous Track")
        pyautogui.press('left')  # Simulate left arrow key
    elif gesture == "PLAY_PAUSE":
        print("Play/Pause")
        pyautogui.press('space')  # Simulate space bar
    elif gesture == "VOLUME_UP":
        print("Volume Up")
        pyautogui.press('volumeup')  # Increase volume
    elif gesture == "VOLUME_DOWN":
        print("Volume Down")
        pyautogui.press('volumedown')  # Decrease volume

# Start video capture
cap = cv2.VideoCapture(0)

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # Flip and convert the frame to RGB
    frame = cv2.flip(frame, 1)
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

    # Detect hands in the frame
    results = hands.process(rgb_frame)

    # Draw landmarks and detect gestures
    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)
            gesture = detect_gesture(hand_landmarks)
            if gesture:
                map_gesture_to_action(gesture)

    # Display the frame
    cv2.imshow("Gesture Mapping", frame)

    # Exit on pressing 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources
cap.release()
cv2.destroyAllWindows()
